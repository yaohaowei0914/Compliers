
;; Function main (main, funcdef_no=0, decl_uid=3174, cgraph_uid=1, symbol_order=0)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;;
;; Loop 1
;;  header 4, latch 3
;;  depth 1, outer 0
;;  nodes: 4 3
;; 2 succs { 4 }
;; 3 succs { 4 }
;; 4 succs { 3 5 }
;; 5 succs { 6 }
;; 6 succs { 1 }
main.c:15: printf: objsize = 9223372036854775807, fmtstr = "%d
"
  Directive 1 at offset 0: "%d"
    Result: 1, 1, 1, 1 (1, 1, 1, 1)
  Directive 2 at offset 2: "
", length = 1
    Result: 1, 1, 1, 1 (2, 2, 2, 2)
  Directive 3 at offset 3: "", length = 1
main.c:16: printf: objsize = 9223372036854775807, fmtstr = "%d
"
  Directive 1 at offset 0: "%d"
    Result: 1, 1, 1, 1 (1, 1, 1, 1)
  Directive 2 at offset 2: "
", length = 1
    Result: 1, 1, 1, 1 (2, 2, 2, 2)
  Directive 3 at offset 3: "", length = 1
main.c:22: printf: objsize = 9223372036854775807, fmtstr = "%d
"
  Directive 1 at offset 0: "%d"
    Result: 1, 1, 11, 11 (1, 1, 11, 11)
  Directive 2 at offset 2: "
", length = 1
    Result: 1, 1, 1, 1 (2, 2, 12, 12)
  Directive 3 at offset 3: "", length = 1
int main ()
{
  int n;
  int t;
  int i;
  int b;
  int a;
  int D.3185;
  int n.0_1;
  int _13;

  <bb 2> :
  a_6 = 0;
  b_7 = 1;
  i_8 = 1;
  scanf ("%d", &n);
  printf ("%d\n", a_6);
  printf ("%d\n", b_7);
  goto <bb 4>; [INV]

  <bb 3> :
  t_15 = b_3;
  b_16 = a_2 + b_3;
  printf ("%d\n", b_16);
  a_18 = t_15;
  i_19 = i_4 + 1;

  <bb 4> :
  # a_2 = PHI <a_6(2), a_18(3)>
  # b_3 = PHI <b_7(2), b_16(3)>
  # i_4 = PHI <i_8(2), i_19(3)>
  n.0_1 = n;
  if (i_4 < n.0_1)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  _13 = 0;
  n ={v} {CLOBBER(eol)};

  <bb 6> :
<L4>:
  return _13;

}


